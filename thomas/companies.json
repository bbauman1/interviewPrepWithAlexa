[
    {
        "accepted": 106145, 
        "companies": "Amazon", 
        "description": "Design and implement a data structure for Least Recently Used (LRU) cache. Support the get and set functions, but remove the least recently used element when the cache is full.", 
        "example": "get with parameter one should return -1 since it is empty. Set with key equals 3 and value 5 then get 3 should return 5",
        "difficulty": "Hard", 
        "hints": [
            "Design"
        ], 
        "name": "LRU Cache", 
        "id": 146, 
        "similar_problems": [
            "(H) LFU Cache"
        ], 
        "total": 663908
    },  
    {
        "accepted": 82735, 
        "companies": "Amazon", 
        "description": "Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.", 
        "example": "Try using breadth first or depth first search",
        "difficulty": "Medium", 
        "hints": [
            "Depth-first Search", 
            "Breadth-first Search", 
            "Union Find"
        ], 
        "name": "Number of Islands",
        "id": 200,  
        "similar_problems": [
            "(M) Surrounded Regions", 
            " (M) Walls and Gates", 
            " (H) Number of Islands II", 
            " (M) Number of Connected Components in an Undirected Graph"
        ], 
        "total": 256028
    }, 
    {
        "accepted": 14133, 
        "companies": "Amazon", 
        "description": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s. Strings consists of lowercase English letters only.",
        "example": "Try using a hash table",
        "difficulty": "Easy", 
        "hints": [
            "Hash Table"
        ], 
        "name": "Find All Anagrams in a String", 
        "id": 438, 
        "similar_problems": [
            "(E) Valid Anagram"
        ], 
        "total": 42399
    }, 
    {
        "accepted": 79091, 
        "companies": "Amazon", 
        "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.",
        "example": "The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).", 
        "difficulty": "Medium", 
        "hints": [
            "Tree"
        ], 
        "name": "Lowest Common Ancestor of a Binary Tree", 
        "id": 236, 
        "similar_problems": [
            "(E) Lowest Common Ancestor of a Binary Search Tree"
        ], 
        "total": 269828
    }, 
    {
        "accepted": 92215, 
        "companies": "Amazon", 
        "description": "A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null. Return a deep copy of the list.", 
        "example": "Try keeping track of the random pointers with a hash table",
        "difficulty": "Hard", 
        "hints": [
            "Hash Table", 
            "Linked List"
        ], 
        "name": "Copy List with Random Pointer",
        "id": 138,  
        "similar_problems": [
            "(M) Clone Graph"
        ], 
        "total": 346268
    }, 
    {
        "accepted": 161724,
        "companies": "Amazon",
        "description": "Given a string containing just the parentheses, brackets, and curly brace characters, determine if the input string is valid. The brackets must close in the correct order",
        "example": "\"()\" and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.", 
        "difficulty": "Easy", 
        "hints": [
            "Stack", 
            "String"
        ], 
        "name": "Valid Parentheses", 
        "id": 20,
        "similar_problems": [
            "(M) Generate Parentheses", 
            " (H) Longest Valid Parentheses", 
            " (H) Remove Invalid Parentheses"
        ], 
        "total": 503241
    }, 
    {
        "accepted": 16645, 
        "companies": "Amazon", 
        "description": "Design a data structure that supports all following operations in average O(1) time. Insert an item val to the set if not already present. Remove an item val from the set if present. Return a random element from current set of elements. Each element must have the same probability of being returned.", 
        "example": "Try combining and array an a hash table",
        "difficulty": "Hard", 
        "hints": [
            "Array", 
            "Hash Table", 
            "Design"
        ], 
        "name": "Insert Delete GetRandom O(1)",
        "id": 380,
        "similar_problems": [
            "(H) Insert Delete GetRandom O(1) - Duplicates allowed"
        ], 
        "total": 43309
    }, 
    {
        "accepted": 78285, 
        "companies": "Amazon", 
        "description": "Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Solve it without division and in O(n).",
        "example": "For example, given [1,2,3,4], return [24,12,8,6]. Follow up: Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)", 
        "difficulty": "Medium", 
        "hints": [
            "Array"
        ], 
        "name": "Product of Array Except Self",
        "id": 238,
        "similar_problems": [
            "(H) Trapping Rain Water", 
            " (M) Maximum Product Subarray", 
            " (H) Paint House II"
        ], 
        "total": 166264
    }, 
    {
        "accepted": 164444, 
        "companies": "Amazon", 
        "description": "Given a string s, find the longest palindromic substring in s.",
        "example" : "Given b,a,b,c output: b,a,b.",
        "difficulty": "Medium", 
        "hints": [
            "String"
        ], 
        "name": "Longest Palindromic Substring",
        "id": 5,
        "similar_problems": [
            "(H) Shortest Palindrome", 
            " (E) Palindrome Permutation", 
            " (H) Palindrome Pairs"
        ], 
        "total": 669434
    }, 
    {
        "accepted": 62251, 
        "companies": "Amazon", 
        "description": "Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom.",
        "example": "Using divide an conquer or binary search are both appropriate here", 
        "difficulty": "Medium", 
        "hints": [
            "Binary Search", 
            "Divide and Conquer"
        ], 
        "name": "Search a 2D Matrix II", 
        "id": 240, 
        "similar_problems": [
            "(M) Search a 2D Matrix"
        ], 
        "total": 164062
    }, 
    {
        "accepted": 180214, 
        "companies": "Amazon", 
        "description": "Reverse a singly linked list.", 
        "example": "You can do this recursively or iteratively",
        "difficulty": "Easy", 
        "hints": [
            "Linked List"
        ], 
        "name": "Reverse Linked List",
        "id": 206, 
        "similar_problems": [
            "(M) Reverse Linked List II", 
            " (M) Binary Tree Upside Down", 
            " (E) Palindrome Linked List"
        ], 
        "total": 414172
    }, 
    {
        "accepted": 113946, 
        "companies": "Amazon", 
        "description": "Given a binary search tree, find the lowest common ancestor of two given nodes in the BST.", 
        "example": "The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).",
        "difficulty": "Easy", 
        "hints": [
            "Tree"
        ], 
        "name": "Lowest Common Ancestor of a Binary Search Tree", 
        "id": 235, 
        "similar_problems": [
            "(M) Lowest Common Ancestor of a Binary Tree"
        ], 
        "total": 299109
    }, 
    {
        "accepted": 107442, 
        "companies": "Amazon", 
        "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. ",
        "example": "The top function returns the top element on the stack", 
        "difficulty": "Easy", 
        "hints": [
            "Stack", 
            "Design"
        ], 
        "name": "Min Stack",
        "id": 155,  
        "similar_problems": [
            "(H) Sliding Window Maximum"
        ], 
        "total": 408383
    },     
    {
        "accepted": 151837, 
        "companies": "Amazon", 
        "description": "Given a linked list, determine if it has a cycle in it. Follow up:\r\nCan you solve it without using extra space?", 
        "example": "Try keeping track of two pointers in the list",
        "difficulty": "Easy", 
        "hints": [
            "Linked List", 
            "Two Pointers"
        ], 
        "name": "Linked List Cycle", 
        "id": 141, 
        "similar_problems": [
            "(M) Linked List Cycle II"
        ], 
        "total": 423905
    }, 
    {
        "accepted": 131025, 
        "companies": "Amazon", 
        "description": "Given two strings s and t, write a function to determine if t is an anagram of s.",
        "example": "For example, s = rat, t = tar, return true.", 
        "difficulty": "Easy", 
        "hints": [
            "Hash Table", 
            "Sort"
        ], 
        "name": "Valid Anagram", 
        "id": 242, 
        "similar_problems": [
            "(M) Group Anagrams", 
            " (E) Palindrome Permutation", 
            " (E) Find All Anagrams in a String"
        ], 
        "total": 291951
    }, 
    {
        "accepted": 102660, 
        "companies": "Amazon", 
        "description": "Find the kth largest element in an unsorted array.",
        "example": " Note that it is the kth largest element in the sorted order, not the kth distinct element.", 
        "difficulty": "Medium", 
        "hints": [
            "Heap", 
            "Divide and Conquer"
        ], 
        "name": "Kth Largest Element in an Array", 
        "id": 215, 
        "similar_problems": [
            "(M) Wiggle Sort II", 
            " (M) Top K Frequent Elements", 
            " (E) Third Maximum Number"
        ], 
        "total": 273878
    }, 
    {
        "accepted": 107795, 
        "companies": "Amazon", 
        "description": "Write a program to find the node at which the intersection of two singly linked lists begins.", 
        "example": "If two lists merge at the fourth node, then return that node",
        "difficulty": "Easy", 
        "hints": [
            "Linked List"
        ], 
        "name": "Intersection of Two Linked Lists", 
        "id": 160, 
        "similar_problems": [], 
        "total": 358879
    }, 
    {
        "accepted": 231270, 
        "companies": "Amazon", 
        "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.",
        "example": "You may assume the two numbers do not contain any leading zero, except the number 0 itself.", 
        "difficulty": "Medium", 
        "hints": [
            "Linked List", 
            "Math"
        ], 
        "name": "Add Two Numbers",
        "id": 2,  
        "similar_problems": [
            "(M) Multiply Strings", 
            " (E) Add Binary", 
            " (E) Sum of Two Integers", 
            " (E) Add Strings", 
            " (M) Add Two Numbers II"
        ], 
        "total": 879808
    }, 
    {
        "accepted": 123288, 
        "companies": "Amazon", 
        "description": "Given a non-empty string s and a dictionary containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words. ",
        "example": "Given the string leetcode and a dictionary containing the two words leet and code, return true.", 
        "difficulty": "Medium", 
        "hints": [
            "Dynamic Programming"
        ], 
        "name": "Word Break",
        "id": 139,  
        "similar_problems": [
            "(H) Word Break II"
        ], 
        "total": 436376
    }, 
    {
        "accepted": 110609, 
        "companies": "Amazon", 
        "description": "Given an array of strings, group anagrams together. All inputs will be in lower-case.", 
        "example": "A hash table could help keep track of the strings",
        "difficulty": "Medium", 
        "hints": [
            "Hash Table", 
            "String"
        ], 
        "name": "Group Anagrams",
        "id": 49,  
        "similar_problems": [
            "(E) Valid Anagram", 
            " (E) Group Shifted Strings"
        ], 
        "total": 346915
    }, 
    {
        "accepted": 59689, 
        "companies": "Amazon", 
        "description": "Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:\r\n\r\n\r\nOnly one letter can be changed at a time\r\nEach intermediate word must exist in the word list\r\n\r\n\r\n\r\nFor example,\r\n\r\n\r\nGiven:\r\nbeginWord = \"hit\"\r\nendWord = \"cog\"\r\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\r\n\r\n\r\nReturn\r\n\r\n  [\r\n    [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\r\n    [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\r\n  ]\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nAll words have the same length.\r\nAll words contain only lowercase alphabetic characters.", 
        "difficulty": "Hard", 
        "hints": [
            "Array", 
            "Backtracking", 
            "Breadth-first Search", 
            "String"
        ], 
        "name": "Word Ladder II", 
        "id": 126, 
        "similar_problems": [], 
        "total": 438382
    }, 
    {
        "accepted": 82620, 
        "companies": "Amazon", 
        "description": "Given a singly linked list, determine if it is a palindrome.\r\n\r\nFollow up:\r\nCould you do it in O(n) time and O(1) space?", 
        "difficulty": "Easy", 
        "hints": [
            "Linked List", 
            "Two Pointers"
        ], 
        "name": "Palindrome Linked List",
        "id": 234,  
        "similar_problems": [
            "(E) Palindrome Number", 
            " (E) Valid Palindrome", 
            " (E) Reverse Linked List"
        ], 
        "total": 261222
    }, 
    {
        "accepted": 134741, 
        "companies": "Amazon", 
        "description": "Given a binary tree, determine if it is a valid binary search tree (BST).\r\n\r\n\r\n\r\nAssume a BST is defined as follows:\r\n\r\nThe left subtree of a node contains only nodes with keys less than the node's key.\r\nThe right subtree of a node contains only nodes with keys greater than the node's key.\r\nBoth the left and right subtrees must also be binary search trees.\r\n\r\n\r\n\r\nExample 1:\r\n\r\n    2\r\n   / \\\r\n  1   3\r\n\r\nBinary tree [2,1,3], return true.\r\n\r\n\r\nExample 2:\r\n\r\n    1\r\n   / \\\r\n  2   3\r\n\r\nBinary tree [1,2,3], return false.", 
        "difficulty": "Medium", 
        "hints": [
            "Tree", 
            "Depth-first Search"
        ], 
        "name": "Validate Binary Search Tree", 
        "id": 98, 
        "similar_problems": [
            "(M) Binary Tree Inorder Traversal"
        ], 
        "total": 602891
    }, 
    {
        "accepted": 46305, 
        "companies": "Amazon", 
        "description": "Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\r\n\r\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\r\n\r\nYou may assume that each input would have exactly one solution.\r\n\r\n\r\nInput: numbers={2, 7, 11, 15}, target=9\r\nOutput: index1=1, index2=2", 
        "difficulty": "Medium", 
        "hints": [
            "Array", 
            "Two Pointers", 
            "Binary Search"
        ], 
        "name": "Two Sum II - Input array is sorted", 
        "id": 167, 
        "similar_problems": [
            "(E) Two Sum"
        ], 
        "total": 96007
    }, 
    {
        "accepted": 235396, 
        "companies": "Amazon", 
        "description": "Given a string, find the length of the longest substring without repeating characters.\r\n\r\nExamples:\r\n\r\nGiven \"abcabcbb\", the answer is \"abc\", which the length is 3.\r\n\r\nGiven \"bbbbb\", the answer is \"b\", with the length of 1.\r\n\r\nGiven \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.", 
        "difficulty": "Medium", 
        "hints": [
            "Hash Table", 
            "Two Pointers", 
            "String"
        ], 
        "name": "Longest Substring Without Repeating Characters", 
        "id": 3, 
        "similar_problems": [
            "(H) Longest Substring with At Most Two Distinct Characters"
        ], 
        "total": 993446
    }, 
    {
        "accepted": 124554, 
        "companies": "Amazon", 
        "description": "Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.", 
        "difficulty": "Hard", 
        "hints": [
            "Divide and Conquer", 
            "Linked List", 
            "Heap"
        ], 
        "name": "Merge k Sorted Lists",
        "id": 23,  
        "similar_problems": [
            "(E) Merge Two Sorted Lists", 
            " (M) Ugly Number II"
        ], 
        "total": 480093
    }, 
    {
        "accepted": 184141, 
        "companies": "Amazon", 
        "description": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.", 
        "difficulty": "Easy", 
        "hints": [
            "Linked List"
        ], 
        "name": "Merge Two Sorted Lists",
        "id": 21,  
        "similar_problems": [
            "(H) Merge k Sorted Lists", 
            " (E) Merge Sorted Array", 
            " (M) Sort List", 
            " (M) Shortest Word Distance II"
        ], 
        "total": 485127
    }, 
    {
        "accepted": 174898, 
        "companies": "Amazon", 
        "description": "Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\r\n\r\nNote: The solution set must not contain duplicate triplets.\r\n\r\n\r\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\r\n\r\nA solution set is:\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]", 
        "difficulty": "Medium", 
        "hints": [
            "Array", 
            "Two Pointers"
        ], 
        "name": "3Sum", 
        "id": 15, 
        "similar_problems": [
            "(E) Two Sum", 
            " (M) 3Sum Closest", 
            " (M) 4Sum", 
            " (M) 3Sum Smaller"
        ], 
        "total": 836531
    }, 
    {
        "accepted": 136082, 
        "companies": "Amazon", 
        "description": "Given a set of distinct integers, nums, return all possible subsets. Note: The solution set must not contain duplicate subsets.",
        "example": "For example, If nums = [1,2,3], a solution is: [3],[1], [2], [1,2,3], [1,3], [2,3], [1,2], and empty set ", 
        "difficulty": "Medium", 
        "hints": [
            "Array", 
            "Backtracking", 
            "Bit Manipulation"
        ], 
        "name": "Subsets", 
        "id": 78, 
        "similar_problems": [
            "(M) Generalized Abbreviation"
        ], 
        "total": 370554
    }, 
    {
        "accepted": 146977, 
        "companies": "Amazon", 
        "description": "Given a binary tree, return the level order traversal of its nodes' values.",
        "example": "(ie, from left to right, level by level). For example: Given binary tree [3,9,20,null,null,15,7]   3,  9  20, 15   7. Return its level order traversal as: array of [3], array of [9,20], and array of [15,7]]" ,
        "difficulty": "Easy", 
        "hints": [
            "Tree", 
            "Breadth-first Search"
        ], 
        "name": "Binary Tree Level Order Traversal", 
        "id": 102, 
        "similar_problems": [
            "(M) Binary Tree Zigzag Level Order Traversal", 
            " (E) Binary Tree Level Order Traversal II", 
            " (E) Minimum Depth of Binary Tree", 
            " (M) Binary Tree Vertical Order Traversal"
        ], 
        "total": 396801
    },  
    {
        "accepted": 96357, 
        "companies": "Amazon", 
        "description": "Count the number of primes from 1 to less than or equal t n.",
        "example": "If n equals 24. Return 2, 3, 5, 7, 11, 13, 17, 23", 
        "difficulty": "Easy", 
        "hints": [
            "Hash Table", 
            "Math"
        ], 
        "name": "Count Primes", 
        "id": 204, 
        "similar_problems": [
            "(E) Ugly Number", 
            " (M) Ugly Number II", 
            " (M) Perfect Squares"
        ], 
        "total": 368557
    }, 
    {
        "accepted": 17144, 
        "companies": "Amazon", 
        "description": "Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).",
        "example" :"Example given array 1 4 80 2 9. Return 4",
        "difficulty": "Easy", 
        "hints": [
            "Array"
        ], 
        "name": "Third Maximum Number", 
        "id": 414, 
        "similar_problems": [
            "(M) Kth Largest Element in an Array"
        ], 
        "total": 64061
    }, 
    {
        "accepted": 100463, 
        "companies": "Amazon", 
        "description": "Given an index k, return the k th row of the Pascal's triangle.", 
        "difficulty": "Easy", 
        "hints": [
            "Array"
        ], 
        "name": "Pascal's Triangle II",
        "id": 119,  
        "similar_problems": [
            "(E) Pascal's Triangle"
        ], 
        "total": 286713
    }, 
    {
        "accepted": 13738, 
        "companies": "Amazon", 
        "description": "Given a string, sort it in decreasing order based on the frequency of characters.",
        "example": "Given string b a b b b c e w q q q . Return b b b b q q q a c e w", 
        "difficulty": "Medium", 
        "hints": [
            "Hash Table", 
            "Heap"
        ], 
        "name": "Sort Characters By Frequency", 
        "id": 451, 
        "similar_problems": [
            "(M) Top K Frequent Elements"
        ], 
        "total": 27056
    }, 
    {
        "accepted": 14298, 
        "companies": "Amazon", 
        "description": "Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000.", 
        "example": "Example 1: Input: a b a b Output: True Explanation: It's the substring a b twice. Example 2: Input: a b a Output: False Example 3 Input: a b c a b c a b c a b c Output: True Explanation: It's the substring a b c four times. (And the substring a b c a b c  twice.)",
        "difficulty": "Easy", 
        "hints": [
            "String"
        ], 
        "name": "Repeated Substring Pattern", 
        "id": 459,
        "similar_problems": [
            "(E) Implement strStr()"
        ], 
        "total": 36144
    }
]